"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""

def find_numbers(x, even_number=0, odd_number=0):
    if x == 0:
        return print(f'Четные числа: {even_number}, нечетные числа: {odd_number}')
    elif x%2 == 0:
        even_number += 1
        return find_numbers(x//10, even_number, odd_number)
    else:
        odd_number +=1
        return find_numbers(x//10, even_number, odd_number)

x = int(input('Введите натуральное число: '))
find_numbers(x)
