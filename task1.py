"""
Задание 1.
Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива
Сделайте замеры времени выполнения кода с помощью модуля timeit
Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.
Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается
И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""

# В первой функции, есть пустой список. В него добавляется каждый раз число, да, по О-нотации, имеет константную
# сложность, но это лишние телодвижения. Если сделать через LC, то мы сразу же получаем новый список, без объявления
# новой переменной, без аппенда, без всего. На небольших количествах разница не так ощутима, но LC выигрывает.

from timeit import Timer

nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20]


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


t_func = Timer("func_1(nums)",
               "from __main__ import func_1, nums")

print('func_1 ', t_func.timeit(number=1000000), 'miliseconds')


def func_3(nums):
    return [nums[i] for i in range(len(nums)) if not i % 2]


t3_func = Timer("func_3(nums)",
                "from __main__ import func_3, nums")
print('func_3 ', t3_func.timeit(number=1000000), 'miliseconds')

